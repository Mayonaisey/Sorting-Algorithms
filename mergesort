void merge(int arr[], int l, int m, int r) { //l,r are indeces begin&end of arr
   //m=l+(r-1)/2   MIDDLE
     //FIRST DIVIDE THE ARRAY 
    int i, j, k;
    int size1 = m - l + 1; //first subarray is arr[l....m]
    int size2 = r - m; //second subarray is arr[m+1...r]
    int* left = new int[size1];
    int* right = new int[size2];
     //then to save the elements in the arrays:
    for (i = 0; i < size1; i++) {
        left[i] = arr[l+i];
    }
    for (j = 0; j < size2; j++) {
        right[j] = arr[m + 1 + j];
    }
    i = j = 0;
    k = l;
     //then compare elements in 2 subarrays
    while (i < size1 && j < size2) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++; k++;
        }
        else {
            arr[k] = right[j];
            j++; k++;
        }
    } //if we finished here 1 array but the second array still has elements:
    while (i < size1) {
        arr[k] = left[i];
        i++;
        k++;
     } 
    while (j < size2) {
        arr[k] =right[j];
        j++;
        k++;
     }

}

void mergesort(int arr[], int l, int r) {
    if (l < r) { //base case
        int m = l + (r - l) / 2; //middle
        mergesort(arr, l, m);
        mergesort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}
